#tree
train <- sample(length(d$check),0.8*length(d$check))
train_t <- d[train,]
test_t <- d[-train,]
d_tree <- rpart(default~.,data=train_t,method="class")
prp(d_tree, type=2, extra=1, varlen=0, split.font=2)
pred <- predict(d_tree,train_t)
pred <- as.data.frame(pred)
prediction <- ifelse(pred$no>0.5,"no","yes")
confusionMatrix(as.factor(prediction),as.factor(train_t$default),dnn=c("Predicted","Actual"))
pred <- predict(d_tree,test_t)
pred <- as.data.frame(pred)
prediction <- ifelse(pred$no>0.5,"no","yes")
confusionMatrix(as.factor(prediction),as.factor(test_t$default),dnn=c("Predicted","Actual"))
#random forest
rf <- randomForest(as.factor(default)~.,data=train_t,ntree=10000,importance=T)
pred <- predict(rf,train_t)
confusionMatrix(as.factor(pred),as.factor(train_t$default),dnn=c("Predicted","Actual"))
pred <- predict(rf,test_t)
confusionMatrix(as.factor(pred),as.factor(test_t$default),dnn=c("Predicted","Actual"))
#knn
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
d <- read_excel("swede_bank.xlsx",na="unknown")
str(d)
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d <- d %>% mutate_all(as.numeric)
d <-lapply(d, normalize)
d <- as.data.frame(d)
train_t <- d[train,]
test_t <- d[-train,]
set.seed(123)
knn <- knn(train = train_t[,-17],test = test_t[,-17],cl=train_t[,17],k=30)
actual <- test_t[,17]
confusionMatrix(as.factor(knn),as.factor(actual),dnn=c("Predicted","Actual"))
library(nnet)
#nnet
nnet <- nnet(default~.,data=train_t,linear.output=F,hidden=5,err.fct="sse",threshold=0.05)
str(d)
#nnet
nnet <- nnet(default~phone,data=train_t,linear.output=F,hidden=5,err.fct="sse",threshold=0.05)
#nnet
nnet <- nnet(default~.,data=train_t,linear.output=F,err.fct="sse",threshold=0.05)
View(test_t)
#nnet
nnet <- nnet(default~.,data=train_t,hidden=5,err.fct="sse",threshold=0.05)
#nnet
nnet <- nnet(default~.,data=train_t,linear.output=F,hidden=5,err.fct="sse",threshold=0.05,
size=10)
nnet$fitted.values
pred <- compute(nnet,test_t[1:16])
pred <- neuralnet::compute(nnet,test_t[1:16])
pred <- compute(nnet,data.frame(test_t[1:16]))
pred <- compute(nnet,data.frame(test_t[,1:16]))
View(test_t)
pred <- compute(nnet,data.frame(test_t))
pred <- neuralnet::compute(nnet,data.frame(test_t))
install.packages("neuralnet")
pred <- neuralnet::compute(nnet,data.frame(test_t))
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
str(test_t)
#nnet
d <- read_excel("swede_bank.xlsx",na="unknown")
str(d)
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d <- d %>% mutate_all(as.numeric)
nnet <- nnet(default~.,data=train_t,linear.output=F,hidden=5,err.fct="sse",threshold=0.05,
size=10)
nnet$fitted.values
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
test_t[,1:16]
train_t <- d[train,]
test_t <- d[-train,]
nnet <- nnet(default~.,data=train_t,linear.output=F,hidden=5,err.fct="sse",threshold=0.05,
size=10)
nnet$fitted.values
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
d <-lapply(d, normalize)
d <- as.data.frame(d)
train_t <- d[train,]
test_t <- d[-train,]
nnet <- nnet(default~.,data=train_t,linear.output=F,hidden=5,err.fct="sse",threshold=0.05,
size=10)
nnet$fitted.values
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
nnet <- nnet(default~.,data=train_t,linear.output=F,hidden=1,err.fct="sse",threshold=0.05,
size=10)
nnet$fitted.values
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))$net.results
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=5,err.fct="sse",threshold=0.05,
size=10)
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=5,err.fct="sse",threshold=0.05)
nnet$fitted.values
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))$net.results
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=5,err.fct="sse",threshold=0.05)
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
View(pred)
pred$net.result
predicted.class <- apply(pred$net.result, 1, which.max)-1
predicted.class
pred$net.result
predicted.class <- ifelse(pred$net.result>0.3,1,0)
mean(pred$net.result)
predicted.class <- ifelse(pred$net.result>0.35,1,0)
confusionMatrix(as.factor(predicted.class),as.factor(test_t[,17]),dnn=c("Predicted","Actual"))
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=10,err.fct="sse",threshold=0.05)
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
pred$net.result
predicted.class <- ifelse(pred$net.result>0.35,1,0)
confusionMatrix(as.factor(predicted.class),as.factor(test_t[,17]),dnn=c("Predicted","Actual"))
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=c(1,1,1),err.fct="sse",threshold=0.05)
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
pred$net.result
mean(pred$net.result)
predicted.class <- ifelse(pred$net.result>0.43,1,0)
confusionMatrix(as.factor(predicted.class),as.factor(test_t[,17]),dnn=c("Predicted","Actual"))
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=c(1,1,5),err.fct="sse",threshold=0.05)
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
mean(pred$net.result)
predicted.class <- ifelse(pred$net.result>0.43,1,0)
confusionMatrix(as.factor(predicted.class),as.factor(test_t[,17]),dnn=c("Predicted","Actual"))
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=c(1,1,5,20),err.fct="sse",threshold=0.05)
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
mean(pred$net.result)
predicted.class <- ifelse(pred$net.result>0.40,1,0)
confusionMatrix(as.factor(predicted.class),as.factor(test_t[,17]),dnn=c("Predicted","Actual"))
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=50,err.fct="sse",threshold=0.05)
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
mean(pred$net.result)
mean(test_t[,17])
predicted.class <- ifelse(pred$net.result>mean(pred$net.result),1,0)
confusionMatrix(as.factor(predicted.class),as.factor(test_t[,17]),dnn=c("Predicted","Actual"))
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=7'',err.fct="sse",threshold=0.05)
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=70,err.fct="sse",threshold=0.05)
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
mean(pred$net.result)
predicted.class <- ifelse(pred$net.result>mean(pred$net.result),1,0)
confusionMatrix(as.factor(predicted.class),as.factor(test_t[,17]),dnn=c("Predicted","Actual"))
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=c(10,10,10,10),err.fct="sse",threshold=0.05)
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
mean(pred$net.result)
predicted.class <- ifelse(pred$net.result>mean(pred$net.result),1,0)
confusionMatrix(as.factor(predicted.class),as.factor(test_t[,17]),dnn=c("Predicted","Actual"))
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=c(10,10,10,10,10,10,10),err.fct="sse",threshold=0.05)
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
mean(pred$net.result)
predicted.class <- ifelse(pred$net.result>mean(pred$net.result),1,0)
confusionMatrix(as.factor(predicted.class),as.factor(test_t[,17]),dnn=c("Predicted","Actual"))
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=50,err.fct="sse",threshold=0.05)
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
mean(pred$net.result)
predicted.class <- ifelse(pred$net.result>mean(pred$net.result),1,0)
confusionMatrix(as.factor(predicted.class),as.factor(test_t[,17]),dnn=c("Predicted","Actual"))
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=30,err.fct="sse",threshold=0.05)
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
mean(pred$net.result)
predicted.class <- ifelse(pred$net.result>mean(pred$net.result),1,0)
confusionMatrix(as.factor(predicted.class),as.factor(test_t[,17]),dnn=c("Predicted","Actual"))
d <- read_excel("swede_bank.xlsx",na="unknown")
str(d)
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d$amount <- as.numeric(d$amount)
d$duration <- as.numeric(d$duration)
d$age <- as.numeric(d$age)
#tree
train <- sample(length(d$check),0.8*length(d$check))
train_t <- d[train,]
test_t <- d[-train,]
d_tree <- rpart(default~.,data=train_t,method="class")
prp(d_tree, type=2, extra=1, varlen=0, split.font=2)
pred <- predict(d_tree,train_t)
pred <- as.data.frame(pred)
prediction <- ifelse(pred$no>0.5,"no","yes")
confusionMatrix(as.factor(prediction),as.factor(train_t$default),dnn=c("Predicted","Actual"))
pred <- predict(d_tree,test_t)
pred <- as.data.frame(pred)
prediction <- ifelse(pred$no>0.5,"no","yes")
confusionMatrix(as.factor(prediction),as.factor(test_t$default),dnn=c("Predicted","Actual"))
#random forest
rf <- randomForest(as.factor(default)~.,data=train_t,ntree=10000,importance=T)
pred <- predict(rf,train_t)
confusionMatrix(as.factor(pred),as.factor(train_t$default),dnn=c("Predicted","Actual"))
pred <- predict(rf,test_t)
confusionMatrix(as.factor(pred),as.factor(test_t$default),dnn=c("Predicted","Actual"))
#knn
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
d <- read_excel("swede_bank.xlsx",na="unknown")
str(d)
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d <- d %>% mutate_all(as.numeric)
d <-lapply(d, normalize)
d <- as.data.frame(d)
train_t <- d[train,]
test_t <- d[-train,]
set.seed(123)
knn <- knn(train = train_t[,-17],test = test_t[,-17],cl=train_t[,17],k=30)
actual <- test_t[,17]
confusionMatrix(as.factor(knn),as.factor(actual),dnn=c("Predicted","Actual"))
#nnet
d <- read_excel("swede_bank.xlsx",na="unknown")
str(d)
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d <- d %>% mutate_all(as.numeric)
d <-lapply(d, normalize)
d <- as.data.frame(d)
train_t <- d[train,]
test_t <- d[-train,]
mean(test_t[,17])
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=30,err.fct="sse",threshold=0.05)
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
mean(pred$net.result)
predicted.class <- ifelse(pred$net.result>mean(pred$net.result),1,0)
confusionMatrix(as.factor(predicted.class),as.factor(test_t[,17]),dnn=c("Predicted","Actual"))
#boosting
boost <- boosting(default~.,data=train_t,mfinal = 4)
#boosting
boost <- boosting(as.factor(default)~.,data=train_t,mfinal = 4)
library(readxl)
library(tidyverse)
library(randomForest)
library(adabag)
library(class)
library(rpart)
library(rpart.plot)
library(caret)
library(nnet)
d <- read_excel("swede_bank.xlsx",na="unknown")
str(d)
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d$amount <- as.numeric(d$amount)
d$duration <- as.numeric(d$duration)
d$age <- as.numeric(d$age)
#tree
train <- sample(length(d$check),0.8*length(d$check))
train_t <- d[train,]
test_t <- d[-train,]
d_tree <- rpart(default~.,data=train_t,method="class")
prp(d_tree, type=2, extra=1, varlen=0, split.font=2)
pred <- predict(d_tree,train_t)
pred <- as.data.frame(pred)
prediction <- ifelse(pred$no>0.5,"no","yes")
confusionMatrix(as.factor(prediction),as.factor(train_t$default),dnn=c("Predicted","Actual"))
pred <- predict(d_tree,test_t)
pred <- as.data.frame(pred)
prediction <- ifelse(pred$no>0.5,"no","yes")
confusionMatrix(as.factor(prediction),as.factor(test_t$default),dnn=c("Predicted","Actual"))
#random forest
rf <- randomForest(as.factor(default)~.,data=train_t,ntree=10000,importance=T)
pred <- predict(rf,train_t)
confusionMatrix(as.factor(pred),as.factor(train_t$default),dnn=c("Predicted","Actual"))
pred <- predict(rf,test_t)
confusionMatrix(as.factor(pred),as.factor(test_t$default),dnn=c("Predicted","Actual"))
#boosting
boost <- boosting(as.factor(default)~.,data=train_t,mfinal = 4)
#boosting
boost <- boosting(default~.,data=train_t,mfinal = 4)
View(d)
View(d)
#boosting
boost <- boosting(default~.,data=train_t[,c(5,6,8,3)],mfinal = 4)
train_t[,c(5,6,8,3)]
#boosting
boost <- boosting(default~.,data=train_t[,c(5,6,8,17,3)],mfinal = 4)
library(ggplot2)
d <- read_excel("swede_bank.xlsx",na="unknown")
str(d)
d <- read_excel("swede_bank.xlsx",na="unknown")
library(readxl)
library(tidyverse)
library(randomForest)
library(adabag)
library(class)
library(rpart)
library(rpart.plot)
library(caret)
library(nnet)
library(ggplot2)
d <- read_excel("swede_bank.xlsx",na="unknown")
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d$amount <- as.numeric(d$amount)
d$duration <- as.numeric(d$duration)
d$age <- as.numeric(d$age)
d <- read_excel("swede_bank.xlsx",na="unknown")
str(d)
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d$amount <- as.numeric(d$amount)
d$duration <- as.numeric(d$duration)
d$age <- as.numeric(d$age)
#tree
train <- sample(length(d$check),0.8*length(d$check))
train_t <- d[train,]
test_t <- d[-train,]
d_tree <- rpart(default~.,data=train_t,method="class")
prp(d_tree, type=2, extra=1, varlen=0, split.font=2)
pred <- predict(d_tree,train_t)
pred <- as.data.frame(pred)
prediction <- ifelse(pred$no>0.5,"no","yes")
confusionMatrix(as.factor(prediction),as.factor(train_t$default),dnn=c("Predicted","Actual"))
pred <- predict(d_tree,test_t)
pred <- as.data.frame(pred)
prediction <- ifelse(pred$no>0.5,"no","yes")
confusionMatrix(as.factor(prediction),as.factor(test_t$default),dnn=c("Predicted","Actual"))
#random forest
rf <- randomForest(as.factor(default)~.,data=train_t,ntree=10000,importance=T)
pred <- predict(rf,train_t)
confusionMatrix(as.factor(pred),as.factor(train_t$default),dnn=c("Predicted","Actual"))
pred <- predict(rf,test_t)
confusionMatrix(as.factor(pred),as.factor(test_t$default),dnn=c("Predicted","Actual"))
#boosting
boost <- boosting(default~.,data=train_t[,c(5,6,8,17,3)],mfinal = 4)
#knn
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
d <- read_excel("swede_bank.xlsx",na="unknown")
str(d)
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d <- d %>% mutate_all(as.numeric)
d <-lapply(d, normalize)
d <- as.data.frame(d)
train_t <- d[train,]
test_t <- d[-train,]
set.seed(123)
knn <- knn(train = train_t[,-17],test = test_t[,-17],cl=train_t[,17],k=30)
actual <- test_t[,17]
confusionMatrix(as.factor(knn),as.factor(actual),dnn=c("Predicted","Actual"))
#nnet
d <- read_excel("swede_bank.xlsx",na="unknown")
str(d)
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d <- d %>% mutate_all(as.numeric)
d <-lapply(d, normalize)
d <- as.data.frame(d)
train_t <- d[train,]
test_t <- d[-train,]
mean(test_t[,17])
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=30,err.fct="sse",threshold=0.05)
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
mean(pred$net.result)
predicted.class <- ifelse(pred$net.result>mean(pred$net.result),1,0)
confusionMatrix(as.factor(predicted.class),as.factor(test_t[,17]),dnn=c("Predicted","Actual"))
#
View(d)
d <- read_excel("swede_bank.xlsx",na="unknown")
d <- read_excel("swede_bank.xlsx",na="unknown")
View(d)
str(d)
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d$amount <- as.numeric(d$amount)
d$duration <- as.numeric(d$duration)
d$age <- as.numeric(d$age)
#tree
train <- sample(length(d$check),0.8*length(d$check))
train_t <- d[train,]
test_t <- d[-train,]
d_tree <- rpart(default~.,data=train_t,method="class")
prp(d_tree, type=2, extra=1, varlen=0, split.font=2)
pred <- predict(d_tree,train_t)
pred <- as.data.frame(pred)
prediction <- ifelse(pred$no>0.5,"no","yes")
confusionMatrix(as.factor(prediction),as.factor(train_t$default),dnn=c("Predicted","Actual"))
pred <- predict(d_tree,test_t)
pred <- as.data.frame(pred)
prediction <- ifelse(pred$no>0.5,"no","yes")
confusionMatrix(as.factor(prediction),as.factor(test_t$default),dnn=c("Predicted","Actual"))
#random forest
rf <- randomForest(as.factor(default)~.,data=train_t,ntree=10000,importance=T)
pred <- predict(rf,train_t)
confusionMatrix(as.factor(pred),as.factor(train_t$default),dnn=c("Predicted","Actual"))
pred <- predict(rf,test_t)
confusionMatrix(as.factor(pred),as.factor(test_t$default),dnn=c("Predicted","Actual"))
#knn
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
d <- read_excel("swede_bank.xlsx",na="unknown")
str(d)
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d <- d %>% mutate_all(as.numeric)
d <-lapply(d, normalize)
d <- as.data.frame(d)
train_t <- d[train,]
test_t <- d[-train,]
set.seed(123)
knn <- knn(train = train_t[,-17],test = test_t[,-17],cl=train_t[,17],k=30)
actual <- test_t[,17]
confusionMatrix(as.factor(knn),as.factor(actual),dnn=c("Predicted","Actual"))
#nnet
d <- read_excel("swede_bank.xlsx",na="unknown")
str(d)
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d <- d %>% mutate_all(as.numeric)
d <-lapply(d, normalize)
d <- as.data.frame(d)
train_t <- d[train,]
test_t <- d[-train,]
mean(test_t[,17])
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=30,err.fct="sse",threshold=0.05)
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
mean(pred$net.result)
predicted.class <- ifelse(pred$net.result>mean(pred$net.result),1,0)
confusionMatrix(as.factor(predicted.class),as.factor(test_t[,17]),dnn=c("Predicted","Actual"))
table(d$default)
d <- read_excel("swede_bank.xlsx")
str(d)
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d$amount <- as.numeric(d$amount)
d$duration <- as.numeric(d$duration)
d$age <- as.numeric(d$age)
#tree
train <- sample(length(d$check),0.8*length(d$check))
train_t <- d[train,]
test_t <- d[-train,]
d_tree <- rpart(default~.,data=train_t,method="class")
prp(d_tree, type=2, extra=1, varlen=0, split.font=2)
pred <- predict(d_tree,train_t)
pred <- as.data.frame(pred)
prediction <- ifelse(pred$no>0.5,"no","yes")
confusionMatrix(as.factor(prediction),as.factor(train_t$default),dnn=c("Predicted","Actual"))
pred <- predict(d_tree,test_t)
pred <- as.data.frame(pred)
prediction <- ifelse(pred$no>0.5,"no","yes")
confusionMatrix(as.factor(prediction),as.factor(test_t$default),dnn=c("Predicted","Actual"))
#random forest
rf <- randomForest(as.factor(default)~.,data=train_t,ntree=10000,importance=T)
pred <- predict(rf,train_t)
confusionMatrix(as.factor(pred),as.factor(train_t$default),dnn=c("Predicted","Actual"))
pred <- predict(rf,test_t)
confusionMatrix(as.factor(pred),as.factor(test_t$default),dnn=c("Predicted","Actual"))
#knn
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
d <- read_excel("swede_bank.xlsx",na="unknown")
str(d)
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d <- d %>% mutate_all(as.numeric)
d <-lapply(d, normalize)
d <- as.data.frame(d)
train_t <- d[train,]
test_t <- d[-train,]
set.seed(123)
knn <- knn(train = train_t[,-17],test = test_t[,-17],cl=train_t[,17],k=30)
actual <- test_t[,17]
confusionMatrix(as.factor(knn),as.factor(actual),dnn=c("Predicted","Actual"))
d <- read_excel("swede_bank.xlsx",na="unknown")
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d <- d %>% mutate_all(as.numeric)
d <-lapply(d, normalize)
d <- as.data.frame(d)
train_t <- d[train,]
test_t <- d[-train,]
set.seed(123)
knn <- knn(train = train_t[,-17],test = test_t[,-17],cl=train_t[,17],k=30)
View(d)
d <- read_excel("swede_bank.xlsx")
str(d)
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d <- d %>% mutate_all(as.numeric)
d <-lapply(d, normalize)
d <- as.data.frame(d)
train_t <- d[train,]
test_t <- d[-train,]
set.seed(123)
knn <- knn(train = train_t[,-17],test = test_t[,-17],cl=train_t[,17],k=30)
actual <- test_t[,17]
confusionMatrix(as.factor(knn),as.factor(actual),dnn=c("Predicted","Actual"))
#nnet
d <- read_excel("swede_bank.xlsx",na="unknown")
str(d)
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d <- d %>% mutate_all(as.numeric)
d <-lapply(d, normalize)
d <- as.data.frame(d)
#nnet
d <- read_excel("swede_bank.xlsx")
str(d)
d <- d %>% filter(complete.cases(.))
d <- d %>% mutate_all(as.factor)
d <- d %>% mutate_all(as.numeric)
d <-lapply(d, normalize)
d <- as.data.frame(d)
train_t <- d[train,]
test_t <- d[-train,]
mean(test_t[,17])
nnet <- neuralnet::neuralnet(default~.,data=train_t,linear.output=F,hidden=30,err.fct="sse",threshold=0.05)
pred <- neuralnet::compute(nnet,data.frame(test_t[,1:16]))
mean(pred$net.result)
predicted.class <- ifelse(pred$net.result>mean(pred$net.result),1,0)
confusionMatrix(as.factor(predicted.class),as.factor(test_t[,17]),dnn=c("Predicted","Actual"))
