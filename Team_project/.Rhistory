formattable(upper, list(
`loan_amount`= color_tile(customRed,customGreen),
`loan_repaid`= color_tile(customRed,customGreen),
`crop_insured`= color_tile(customRed,customGreen),
`years_of_exp_in_sericulture`= color_tile(customRed,customGreen),
`training_on_sericulture`= color_tile(customRed,customGreen),
`krishi_pond`= color_tile(customRed,customGreen),
`borewell_recharge`= color_tile(customRed,customGreen),
`rain_harvesting`= color_tile(customRed,customGreen),
`own_compost_manure`= color_tile(customRed,customGreen),
`own_vermi_compost`= color_tile(customRed,customGreen),
`trenching_mulching`= color_tile(customRed,customGreen),
`bio_fertilizers`= color_tile(customRed,customGreen),
`mechanization`= color_tile(customRed,customGreen),
`mulberry_diseases`= color_tile(customRed,customGreen),
`affected_by_pest`= color_tile(customRed,customGreen),
`rearing_cost`= color_tile(customRed,customGreen),
`instrument_mgmt_cost`= color_tile(customRed,customGreen),
`temp_mgmt`= color_tile(customRed,customGreen),
`humidity_mgmt`= color_tile(customRed,customGreen),
`airvent_temp_mgmt`= color_tile(customRed,customGreen),
`rotary_mounting`= color_tile(customRed,customGreen),
`seri_total_subsidy`= color_tile(customRed,customGreen),
`income_per_acre`= color_tile(customRed,customGreen),
`chawki_bivol`= color_tile(customRed,customGreen)))
library(formattable)
formattable(upper, list(
`loan_amount`= color_tile(customRed,customGreen),
`loan_repaid`= color_tile(customRed,customGreen),
`crop_insured`= color_tile(customRed,customGreen),
`years_of_exp_in_sericulture`= color_tile(customRed,customGreen),
`training_on_sericulture`= color_tile(customRed,customGreen),
`krishi_pond`= color_tile(customRed,customGreen),
`borewell_recharge`= color_tile(customRed,customGreen),
`rain_harvesting`= color_tile(customRed,customGreen),
`own_compost_manure`= color_tile(customRed,customGreen),
`own_vermi_compost`= color_tile(customRed,customGreen),
`trenching_mulching`= color_tile(customRed,customGreen),
`bio_fertilizers`= color_tile(customRed,customGreen),
`mechanization`= color_tile(customRed,customGreen),
`mulberry_diseases`= color_tile(customRed,customGreen),
`affected_by_pest`= color_tile(customRed,customGreen),
`rearing_cost`= color_tile(customRed,customGreen),
`instrument_mgmt_cost`= color_tile(customRed,customGreen),
`temp_mgmt`= color_tile(customRed,customGreen),
`humidity_mgmt`= color_tile(customRed,customGreen),
`airvent_temp_mgmt`= color_tile(customRed,customGreen),
`rotary_mounting`= color_tile(customRed,customGreen),
`seri_total_subsidy`= color_tile(customRed,customGreen),
`income_per_acre`= color_tile(customRed,customGreen),
`chawki_bivol`= color_tile(customRed,customGreen)))
mod_ln6 <- lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=jaya)
summary(mod_ln6)
learning_index <- sample(1:508,10)
testing_index <- sample(1:508,10)
learning_data <- jaya(-testing_index,)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
predict <- data.frame(prediction=predict(mod_ln6),actual=jaya$income_per_acre)
predict$error <- predict$actual-predict$prediction
plot(predict$prediction,predict$actual)
ggplot(predict,aes(prediction,actual)) + geom_point(size=0.3,alpha=0.4) +
geom_smooth(method="lm",formula="y~poly(x,1)",se=F,color="blue",size=0.4,)
mod_learning <-  lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=learning_data)
summary(mod_learning)
predict <- data.frame(prediction=predict(mod_ln6,new_data=testing),actual=jaya$income_per_acre[testing_index,])
predict <- data.frame(prediction=predict(mod_ln6,new_data=testing),actual=jaya$income_per_acre[testing_index])
predict <- data.frame(prediction=predict(mod_ln6,new_data=testing_data),actual=jaya$income_per_acre[testing_index])
predict <- data.frame(prediction=predict(mod_ln6,testing_data),actual=jaya$income_per_acre[testing_index])
predict <- data.frame(prediction=predict(mod_ln6,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
plot(predict$prediction,predict$actual)
ggplot(predict,aes(prediction,actual)) + geom_point(size=0.3,alpha=0.4) +
geom_smooth(method="lm",formula="y~poly(x,1)",se=F,color="blue",size=0.4,)
ggplot(predict,aes(prediction,actual)) + geom_point(size=3,alpha=0.4) +
geom_smooth(method="lm",formula="y~poly(x,1)",se=F,color="blue",size=0.4,)
cor(predict$prediction,predict$actual)^2
R <- c()
R_sampling <- c()
R_sampling <- c(R_sampling,cor(predict$prediction,predict$actual)^2)
R_sampling <- c()
for (i in 1:10) {
testing_index <- sample(1:508,10)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_learning <-  lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=learning_data)
predict <- data.frame(prediction=predict(mod_ln6,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling <- c(R_sampling,cor(predict$prediction,predict$actual)^2)
}
mean(R_sampling)
R_sampling
for (i in 1:50) {
testing_index <- sample(1:508,10)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_learning <-  lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=learning_data)
predict <- data.frame(prediction=predict(mod_ln6,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling <- c(R_sampling,cor(predict$prediction,predict$actual)^2)
}
R_sampling
mean(R_sampling)
for (i in 1:100) {
testing_index <- sample(1:508,10)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_learning <-  lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=learning_data)
predict <- data.frame(prediction=predict(mod_ln6,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling <- c(R_sampling,cor(predict$prediction,predict$actual)^2)
}
mean(R_sampling)
for (i in 1:1000) {
testing_index <- sample(1:508,10)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_learning <-  lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=learning_data)
predict <- data.frame(prediction=predict(mod_ln6,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling <- c(R_sampling,cor(predict$prediction,predict$actual)^2)
}
mean(R_sampling)
sample(1:508,10)
sample(1:508,10)
sample(1:508,10)
sample(1:508,10)
sample(1:508,10)
sample(1:508,10)
sample(1:508,10)
ggplot(predict,aes(prediction,actual)) + geom_point(size=0.3,alpha=0.4) +
geom_smooth(method="lm",formula="y~poly(x,1)",se=F,color="blue",size=0.4,)
predict <- data.frame(prediction=predict(mod_ln),actual=jaya$income_per_acre)
predict$error <- predict$actual-predict$prediction
ggplot(predict,aes(prediction,actual)) + geom_point(size=0.3,alpha=0.4) +
geom_smooth(method="lm",formula="y~poly(x,1)",se=F,color="blue",size=0.4,)
for (i in 1:1000) {
testing_index <- sample(1:508,10)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_learning <-  lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=learning_data)
predict <- data.frame(prediction=predict(mod_ln6,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling <- c(R_sampling,cor(predict$prediction,predict$actual)^2)
}
mean(R_sampling)
mod_all <- lm(income_per_acre ~ loan_amount + loan_repaid + crop_insured + years_of_exp_in_sericulture +
training_on_sericulture + krishi_pond + borewell_recharge + rain_harvesting +
own_compost_manure + own_vermi_compost + trenching_mulching + bio_fertilizers
+ mechanization + mulberry_diseases + affected_by_pest + rearing_cost +
instrument_mgmt_cost + temp_mgmt + humidity_mgmt + airvent_temp_mgmt +
rotary_mounting + seri_total_subsidy + chawki_bivol+ rearing_cost_missing
,data=jaya)
R_sampling_modall <- c()
R_sampling_modall <- c()
for (i in 1:1000) {
testing_index <- sample(1:508,10)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_all <- lm(income_per_acre ~ loan_amount + loan_repaid + crop_insured + years_of_exp_in_sericulture +
training_on_sericulture + krishi_pond + borewell_recharge + rain_harvesting +
own_compost_manure + own_vermi_compost + trenching_mulching + bio_fertilizers
+ mechanization + mulberry_diseases + affected_by_pest + rearing_cost +
instrument_mgmt_cost + temp_mgmt + humidity_mgmt + airvent_temp_mgmt +
rotary_mounting + seri_total_subsidy + chawki_bivol+ rearing_cost_missing
,data=learning_data)
predict <- data.frame(prediction=predict(mod_all,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling_modall <- c(R_sampling_mod6,cor(predict$prediction,predict$actual)^2)
}
R_sampling_modall <- c()
for (i in 1:1000) {
testing_index <- sample(1:508,10)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_all <- lm(income_per_acre ~ loan_amount + loan_repaid + crop_insured + years_of_exp_in_sericulture +
training_on_sericulture + krishi_pond + borewell_recharge + rain_harvesting +
own_compost_manure + own_vermi_compost + trenching_mulching + bio_fertilizers
+ mechanization + mulberry_diseases + affected_by_pest + rearing_cost +
instrument_mgmt_cost + temp_mgmt + humidity_mgmt + airvent_temp_mgmt +
rotary_mounting + seri_total_subsidy + chawki_bivol+ rearing_cost_missing
,data=learning_data)
predict <- data.frame(prediction=predict(mod_all,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling_modall <- c(R_sampling_modall,cor(predict$prediction,predict$actual)^2)
}
mean(R_sampling_modall)
for (i in 1:100) {
testing_index <- sample(1:508,10)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_all <- lm(income_per_acre ~ loan_amount + loan_repaid + crop_insured + years_of_exp_in_sericulture +
training_on_sericulture + krishi_pond + borewell_recharge + rain_harvesting +
own_compost_manure + own_vermi_compost + trenching_mulching + bio_fertilizers
+ mechanization + mulberry_diseases + affected_by_pest + rearing_cost +
instrument_mgmt_cost + temp_mgmt + humidity_mgmt + airvent_temp_mgmt +
rotary_mounting + seri_total_subsidy + chawki_bivol+ rearing_cost_missing
,data=learning_data)
predict <- data.frame(prediction=predict(mod_all,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling_modall <- c(R_sampling_modall,cor(predict$prediction,predict$actual)^2)
}
mean(R_sampling_modall)
for (i in 1:100) {
testing_index <- sample(1:508,10)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_learning <-  lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=learning_data)
predict <- data.frame(prediction=predict(mod_ln6,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling_mod6 <- c(R_sampling_mod6,cor(predict$prediction,predict$actual)^2)
}
R_sampling_mod6 <- c()
for (i in 1:100) {
testing_index <- sample(1:508,10)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_learning <-  lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=learning_data)
predict <- data.frame(prediction=predict(mod_ln6,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling_mod6 <- c(R_sampling_mod6,cor(predict$prediction,predict$actual)^2)
}
mean(R_sampling_mod6)
R_sampling_modall <- c()
for (i in 1:100) {
testing_index <- sample(1:508,30)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_all <- lm(income_per_acre ~ loan_amount + loan_repaid + crop_insured + years_of_exp_in_sericulture +
training_on_sericulture + krishi_pond + borewell_recharge + rain_harvesting +
own_compost_manure + own_vermi_compost + trenching_mulching + bio_fertilizers
+ mechanization + mulberry_diseases + affected_by_pest + rearing_cost +
instrument_mgmt_cost + temp_mgmt + humidity_mgmt + airvent_temp_mgmt +
rotary_mounting + seri_total_subsidy + chawki_bivol+ rearing_cost_missing
,data=learning_data)
predict <- data.frame(prediction=predict(mod_all,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling_modall <- c(R_sampling_modall,cor(predict$prediction,predict$actual)^2)
}
mean(R_sampling_modall)
mod_ln6 <- lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=jaya)
R_sampling_mod6 <- c()
for (i in 1:100) {
testing_index <- sample(1:508,30)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_learning <-  lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=learning_data)
predict <- data.frame(prediction=predict(mod_ln6,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling_mod6 <- c(R_sampling_mod6,cor(predict$prediction,predict$actual)^2)
}
mean(R_sampling_mod6)
R_sampling_modall <- c()
for (i in 1:100) {
testing_index <- sample(1:508,30)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_all <- lm(income_per_acre ~ loan_amount + loan_repaid + crop_insured + years_of_exp_in_sericulture +
training_on_sericulture + krishi_pond + borewell_recharge + rain_harvesting +
own_compost_manure + own_vermi_compost + trenching_mulching + bio_fertilizers
+ mechanization + mulberry_diseases + affected_by_pest + rearing_cost +
instrument_mgmt_cost + temp_mgmt + humidity_mgmt + airvent_temp_mgmt +
rotary_mounting + seri_total_subsidy + chawki_bivol+ rearing_cost_missing
,data=learning_data)
predict <- data.frame(prediction=predict(mod_all,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling_modall <- c(R_sampling_modall,cor(predict$prediction,predict$actual)^2)
}
mean(R_sampling_modall)
R_sampling_mod6 <- c()
for (i in 1:100) {
testing_index <- sample(1:508,30)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_learning <-  lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=learning_data)
predict <- data.frame(prediction=predict(mod_ln6,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling_mod6 <- c(R_sampling_mod6,cor(predict$prediction,predict$actual)^2)
}
mean(R_sampling_mod6)
for (i in 1:1000) {
testing_index <- sample(1:508,30)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_all <- lm(income_per_acre ~ loan_amount + loan_repaid + crop_insured + years_of_exp_in_sericulture +
training_on_sericulture + krishi_pond + borewell_recharge + rain_harvesting +
own_compost_manure + own_vermi_compost + trenching_mulching + bio_fertilizers
+ mechanization + mulberry_diseases + affected_by_pest + rearing_cost +
instrument_mgmt_cost + temp_mgmt + humidity_mgmt + airvent_temp_mgmt +
rotary_mounting + seri_total_subsidy + chawki_bivol+ rearing_cost_missing
,data=learning_data)
predict <- data.frame(prediction=predict(mod_all,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling_modall <- c(R_sampling_modall,cor(predict$prediction,predict$actual)^2)
}
mean(R_sampling_modall)
for (i in 1:1000) {
testing_index <- sample(1:508,30)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_learning <-  lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=learning_data)
predict <- data.frame(prediction=predict(mod_ln6,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling_mod6 <- c(R_sampling_mod6,cor(predict$prediction,predict$actual)^2)
}
R_sampling_modall <- c()
for (i in 1:1000) {
testing_index <- sample(1:508,30)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_all <- lm(income_per_acre ~ loan_amount + loan_repaid + crop_insured + years_of_exp_in_sericulture +
training_on_sericulture + krishi_pond + borewell_recharge + rain_harvesting +
own_compost_manure + own_vermi_compost + trenching_mulching + bio_fertilizers
+ mechanization + mulberry_diseases + affected_by_pest + rearing_cost +
instrument_mgmt_cost + temp_mgmt + humidity_mgmt + airvent_temp_mgmt +
rotary_mounting + seri_total_subsidy + chawki_bivol+ rearing_cost_missing
,data=learning_data)
predict <- data.frame(prediction=predict(mod_all,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling_modall <- c(R_sampling_modall,cor(predict$prediction,predict$actual)^2)
}
mean(R_sampling_modall)
R_sampling_mod6 <- c()
for (i in 1:1000) {
testing_index <- sample(1:508,30)
learning_data <- jaya[-testing_index,]
testing_data <- jaya [testing_index,]
mod_learning <-  lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=learning_data)
predict <- data.frame(prediction=predict(mod_ln6,testing_data),actual=jaya$income_per_acre[testing_index])
predict$error <- predict$actual-predict$prediction
R_sampling_mod6 <- c(R_sampling_mod6,cor(predict$prediction,predict$actual)^2)
}
mean(R_sampling_mod6)
#Learning and testing
jaya <- readxl::read_excel("jayalaxmi.xlsx")
#Learning and testing
library(ggplot2)
summary(mod_ln6)
mod_ln6 <- lm(income_per_acre ~  crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=jaya)
summary(mod_ln6)
mod_ln6 <- lm(income_per_acre ~ loan_amount +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=jaya)
summary(mod_ln6)
mod_ln6 <- lm(income_per_acre ~ loan_amount + crop_insured +
own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=jaya)
summary(mod_ln6)
mod_ln6 <- lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=jaya)
summary(mod_ln6)
mod_ln6 <- lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=jaya)
summary(mod_ln6)
mod_ln6 <- lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+  mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=jaya)
summary(mod_ln6)
mod_ln6 <- lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=jaya)
summary(mod_ln6)
mod_ln6 <- lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
rearing_cost + temp_mgmt + chawki_bivol
,data=jaya)
summary(mod_ln6)
mod_ln6 <- lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + temp_mgmt + chawki_bivol
,data=jaya)
summary(mod_ln6)
mod_ln6 <- lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost +  chawki_bivol
,data=jaya)
summary(mod_ln6)
mod_ln6 <- lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt
,data=jaya)
summary(mod_ln6)
mod_ln6 <- lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol+temp_mgmt:mechanization
,data=jaya)
summary(mod_ln6)
mod_ln6 <- lm(income_per_acre ~ loan_amount + crop_insured +
training_on_sericulture + own_vermi_compost +
bio_fertilizers+ mechanization + mulberry_diseases +
affected_by_pest + rearing_cost + temp_mgmt + chawki_bivol
,data=jaya)
summary(mod_ln6)
fit_all
View(abs(fit_all$coefficients))
summary(fit_all)
library(pls)
library(plotly)
jaya <- readxl::read_excel("jayalaxmi.xlsx")
fit_all <- pcr(income_per_acre~.,data=jaya,scale=TRUE,validation="CV",na.action=na.omit)
summary(fit_all)
library(tidyverse)
jaya_model <- jaya %>% filter(chawki_bivol,mechanization,loan_amount,loan_repaid,mulberry_diseases,
temp_mgmt,training_on_sericulture,rain_harvesting,rotary_mounting)
mod_pcr <- pcr(income_per_acre~.,data=jaya_model,scale=TRUE,validation="CV",na.action=na.omit)
View(jaya_model)
jaya_model <- jaya %>% select(chawki_bivol,mechanization,loan_amount,loan_repaid,mulberry_diseases,
temp_mgmt,training_on_sericulture,rain_harvesting,rotary_mounting)
mod_pcr <- pcr(income_per_acre~.,data=jaya_model,scale=TRUE,validation="CV",na.action=na.omit)
jaya_model <- jaya %>% select(income_per_acre,chawki_bivol,mechanization,loan_amount,loan_repaid,mulberry_diseases,
temp_mgmt,training_on_sericulture,rain_harvesting,rotary_mounting)
mod_pcr <- pcr(income_per_acre~.,data=jaya_model,scale=TRUE,validation="CV",na.action=na.omit)
summary(mod_pcr)
mod_pcr <- lm(income_per_acre~chawki_bivol+mechanization+loan_amount+loan_repaid+mulberry_diseases+
temp_mgmt+training_on_sericulture+rain_harvesting+rotary_mounting,jaya)
summary(mod_pcr)
mod_pcr <- lm(income_per_acre~chawki_bivol+mechanization+loan_amount+mulberry_diseases+
temp_mgmt+training_on_sericulture,jaya)
summary(mod_pcr)
mod_pcr <- lm(income_per_acre~chawki_bivol+mechanization+loan_amount+mulberry_diseases+
temp_mgmt+training_on_sericulture,jaya)
summary(mod_pcr)
testing_index
-testing_index
jaya[testing,]
jaya[testing_index,]
jaya[-testing_index,]
View(jaya[testing_index,])
View(jaya[-testing_index,])
View(abs(fit_all$coefficients))
View(fit_all$coefficients)
install.packages("writexl")
View(round(cor(jaya),2))
