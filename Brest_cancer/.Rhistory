#testing data
pred <- predict(rf,test_t)
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn = c("Predicted","Actual"))
conf
set.seed(123)
tree <-rpart(diagnosis~.,data=train_t,method = "class",control = rpart.control(maxdepth = 5))
tree
prp(tree,type=4,extra=1,split.font=1,varlen=-10)
pred <- predict(tree,train_t,type="class")
conf <- confusionMatrix(pred,as.factor(train_t$diagnosis),dnn=c("Predicted","Actual"))
conf
#test data
pred <- predict(tree,test_t,type="class")
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn=c("Predicted","Actual"))
conf
rf <-randomForest(as.factor(diagnosis)~.,data=train_t,
ntree=1000,importance=T)
#random forest
rf <-randomForest(as.factor(diagnosis)~.,data=train_t,
ntree=10000,importance=T)
pred <- predict(rf,train_t)
conf <- confusionMatrix(pred,as.factor(train_t$diagnosis),dnn = c("Predicted","Actual"))
conf
#testing data
pred <- predict(rf,test_t)
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn = c("Predicted","Actual"))
conf
#random forest
rf <-randomForest(as.factor(diagnosis)~.,data=train_t,
ntree=5000,importance=T)
pred <- predict(rf,train_t)
conf <- confusionMatrix(pred,as.factor(train_t$diagnosis),dnn = c("Predicted","Actual"))
conf
#testing data
pred <- predict(rf,test_t)
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn = c("Predicted","Actual"))
conf
prp(rf,type=4,extra=1,split.font=1,varlen=-10)
#testing data
pred <- predict(rf,test_t)
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn = c("Predicted","Actual"))
conf
ntree=5000,importance=T))
plot(randomForest(randomForest(as.factor(diagnosis)~.,data=train_t,
ntree=5000,importance=T)))
plot(randomForest(randomForest(as.factor(diagnosis)~.,data=train_t,
ntree=5000,importance=T)),log="y")
plot(randomForest(as.factor(diagnosis) ~ ., data=train_t, keep.forest=FALSE, ntree=100), log="y")
plot(randomForest(as.factor(diagnosis) ~ ., data=train_t, keep.forest=FALSE, ntree=500), log="y")
cforest(as.factor(diagnosis)  ~ ., data=train_t, controls=cforest_control(mtry=2, mincriterion=0))
getTree(rf, 1, labelVar=TRUE)
prp(getTree(rf, 1, labelVar=TRUE),type=4,extra=1,split.font=1,varlen=-10)
pl_rf<-getTree(rf, 1, labelVar=TRUE)
realtree <- reprtree:::as.tree(pl_rf, model)
install.packages(reprtree)
realtree <- reprtree:::as.tree(pl_rf, model)
pl_rf<-getTree(rf, 1, labelVar=TRUE)
getTree(rf, 1, labelVar=TRUE)
conf
conf
conf <- confusionMatrix(pred,as.factor(train_t$diagnosis),dnn = c("Predicted","Actual"))
conf
pred <- predict(rf,train_t)
conf <- confusionMatrix(pred,as.factor(train_t$diagnosis),dnn = c("Predicted","Actual"))
conf
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn = c("Predicted","Actual"))
conf
#testing data
pred <- predict(rf,test_t)
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn = c("Predicted","Actual"))
conf
library(class)
#Knn
set.seed(123)
View(train_t)
pred <- knn(train=train_t[,-1],test=test_t[,-11],cl=train_t[,1],k=20)
str(train_t)
d <- read_excel("wisc_bc_data.xlsx")
View(d)
tree <- d[,2:32]
#Reduction of data
#look for colinearity in 1st
View(cor(tree[,2:31]))
tree <- select(tree,-c("perimeter_mean","area_mean","radius_worst","perimeter_worst","area_worst"))
#look for colinearity in 2nd
View(cor(tree[,2:26]))
tree <- select(tree,-c("texture_worst"))
#look for colinearity in 3rd
View(cor(tree[,2:25]))
tree <- select(tree,-c("concavity_mean"))
#look for colinearity in se
View(cor(tree[,2:24]))
tree <- select(tree,-c("perimeter_se","area_se"))
#look for colinearity in
View(cor(tree[,2:22]))
tree <- select(tree,-c("concavity_worst"))
tree <- select(tree,-c("points_worst"))
tree$diagnosis <- ifelse(tree$diagnosis=="B",0,1)
train_t <- tree[train,]
test_t <- tree[-train,]
set.seed(123)
tree <-rpart(diagnosis~.,data=train_t,method = "class",control = rpart.control(maxdepth = 5))
tree
prp(tree,type=4,extra=1,split.font=1,varlen=-10)
pred <- predict(tree,train_t,type="class")
conf <- confusionMatrix(pred,as.factor(train_t$diagnosis),dnn=c("Predicted","Actual"))
conf
#test data
pred <- predict(tree,test_t,type="class")
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn=c("Predicted","Actual"))
conf
#random forest
rf <-randomForest(as.factor(diagnosis)~.,data=train_t,
ntree=5000,importance=T)
pred <- predict(rf,train_t)
conf <- confusionMatrix(pred,as.factor(train_t$diagnosis),dnn = c("Predicted","Actual"))
conf
#testing data
pred <- predict(rf,test_t)
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn = c("Predicted","Actual"))
conf
plot(randomForest(as.factor(diagnosis) ~ ., data=train_t, keep.forest=FALSE, ntree=500), log="y")
getTree(rf, 1, labelVar=TRUE)
#Knn
set.seed(123)
pred <- knn(train=train_t[,-1],test=test_t[,-11],cl=train_t[,1],k=20)
length(train_t[,-1])
length(train_t[,1])
str(train_t)
train <- sample(569,569*0.8)
tree$diagnosis <- ifelse(tree$diagnosis=="B",0,1)
train_t <- scale(tree[train,])
test_t <- scale(tree[-train,])
set.seed(123)
tree <-rpart(diagnosis~.,data=train_t,method = "class",control = rpart.control(maxdepth = 5))
tree
prp(tree,type=4,extra=1,split.font=1,varlen=-10)
pred <- predict(tree,train_t,type="class")
conf <- confusionMatrix(pred,as.factor(train_t$diagnosis),dnn=c("Predicted","Actual"))
conf
#test data
pred <- predict(tree,test_t,type="class")
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn=c("Predicted","Actual"))
conf
#random forest
rf <-randomForest(as.factor(diagnosis)~.,data=train_t,
ntree=500,importance=T)
pred <- predict(rf,train_t)
conf <- confusionMatrix(pred,as.factor(train_t$diagnosis),dnn = c("Predicted","Actual"))
conf
#testing data
pred <- predict(rf,test_t)
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn = c("Predicted","Actual"))
conf
plot(randomForest(as.factor(diagnosis) ~ ., data=train_t, keep.forest=FALSE, ntree=500), log="y")
getTree(rf, 1, labelVar=TRUE)
#Knn
set.seed(123)
pred <- knn(train=train_t[,-1],test=test_t[,-11],cl=train_t[,1],k=20)
View(train_t)
train_t <- scale(tree[train,])
#Knn
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
tree <- as.data.frame(lapply(tree[,2:31]),normalize)
tree <- as.data.frame(lapply(tree[,2:31]),normalize)
tree <- as.data.frame(lapply(tree[,2:31],normalize))
d <- read_excel("wisc_bc_data.xlsx")
View(d)
tree <- d[,2:32]
tree <- as.data.frame(lapply(tree[,2:31],normalize))
#look for colinearity in 1st
tree <- select(tree,-c("perimeter_mean","area_mean","radius_worst","perimeter_worst","area_worst"))
#look for colinearity in 2nd
tree <- select(tree,-c("texture_worst"))
#look for colinearity in 3rd
tree <- select(tree,-c("concavity_mean"))
#look for colinearity in se
tree <- select(tree,-c("perimeter_se","area_se"))
#look for colinearity in
tree <- select(tree,-c("concavity_worst"))
tree <- select(tree,-c("points_worst"))
train <- sample(569,569*0.8)
tree$diagnosis <- ifelse(tree$diagnosis=="B",0,1)
train_t <- stree[train,]
test_t <- tree[-train,]
set.seed(123)
tree <-rpart(diagnosis~.,data=train_t,method = "class",control = rpart.control(maxdepth = 5))
tree
prp(tree,type=4,extra=1,split.font=1,varlen=-10)
pred <- predict(tree,train_t,type="class")
conf <- confusionMatrix(pred,as.factor(train_t$diagnosis),dnn=c("Predicted","Actual"))
conf
#test data
pred <- predict(tree,test_t,type="class")
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn=c("Predicted","Actual"))
conf
#random forest
rf <-randomForest(as.factor(diagnosis)~.,data=train_t,
ntree=500,importance=T)
pred <- predict(rf,train_t)
conf <- confusionMatrix(pred,as.factor(train_t$diagnosis),dnn = c("Predicted","Actual"))
conf
#testing data
pred <- predict(rf,test_t)
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn = c("Predicted","Actual"))
conf
plot(randomForest(as.factor(diagnosis) ~ ., data=train_t, keep.forest=FALSE, ntree=500), log="y")
getTree(rf, 1, labelVar=TRUE)
#Knn
set.seed(123)
pred <- knn(train=train_t[,-1],test=test_t[,-11],cl=train_t[,1],k=20)
#testing data
pred <- predict(rf,test_t)
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn = c("Predicted","Actual"))
conf
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn = c("Predicted","Actual"))
#testing data
pred <- predict(rf,test_t)
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn = c("Predicted","Actual"))
#testing data
pred <- predict(rf,test_t)
length(pred)
View(test_t)
train_t <- tree[train,]
d <- read_excel("wisc_bc_data.xlsx")
View(d)
tree <- d[,2:32]
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
tree <- as.data.frame(lapply(tree[,2:31],normalize))
#Reduction of data
#look for colinearity in 1st
tree <- select(tree,-c("perimeter_mean","area_mean","radius_worst","perimeter_worst","area_worst"))
#look for colinearity in 2nd
tree <- select(tree,-c("texture_worst"))
#look for colinearity in 3rd
tree <- select(tree,-c("concavity_mean"))
#look for colinearity in se
tree <- select(tree,-c("perimeter_se","area_se"))
#look for colinearity in
tree <- select(tree,-c("concavity_worst"))
tree <- select(tree,-c("points_worst"))
#Decission tree
train <- sample(569,569*0.8)
tree$diagnosis <- ifelse(tree$diagnosis=="B",0,1)
train_t <- tree[train,]
test_t <- tree[-train,]
View(tree)
d <- read_excel("wisc_bc_data.xlsx")
View(d)
tree <- d[,2:32]
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
tree <- as.data.frame(lapply(tree[,2:31],normalize))
#Reduction of data
#look for colinearity in 1st
tree <- select(tree,-c("perimeter_mean","area_mean","radius_worst","perimeter_worst","area_worst"))
#look for colinearity in 2nd
tree <- select(tree,-c("texture_worst"))
#look for colinearity in 3rd
tree <- select(tree,-c("concavity_mean"))
#look for colinearity in se
tree <- select(tree,-c("perimeter_se","area_se"))
#look for colinearity in
tree <- select(tree,-c("concavity_worst"))
tree <- select(tree,-c("points_worst"))
tree <- select(tree,-c("perimeter_mean","area_mean","radius_worst","perimeter_worst","area_worst"))
#look for colinearity in 2nd
tree <- select(tree,-c("texture_worst"))
#look for colinearity in 3rd
tree <- select(tree,-c("concavity_mean"))
#look for colinearity in se
tree <- select(tree,-c("perimeter_se","area_se"))
#look for colinearity in
tree <- select(tree,-c("concavity_worst"))
tree <- select(tree,-c("points_worst"))
d <- read_excel("wisc_bc_data.xlsx")
View(d)
tree <- d[,2:32]
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
tree <- as.data.frame(lapply(tree[,2:31],normalize))
#Reduction of data
#look for colinearity in 1st
tree <- select(tree,-c("perimeter_mean","area_mean","radius_worst","perimeter_worst","area_worst"))
#look for colinearity in 2nd
tree <- select(tree,-c("texture_worst"))
#look for colinearity in 3rd
tree <- select(tree,-c("concavity_mean"))
#look for colinearity in se
tree <- select(tree,-c("perimeter_se","area_se"))
#look for colinearity in
tree <- select(tree,-c("concavity_worst"))
tree <- select(tree,-c("points_worst"))
View(tree)
tree <- as.data.frame(lapply(tree[,2:31],normalize))
#import data
d <- read_excel("wisc_bc_data.xlsx")
tree <- d[,2:32]
View(tree)
tree <- as.data.frame(lapply(tree[,2:31],normalize))
View(tree)
#import data
d <- read_excel("wisc_bc_data.xlsx")
tree <- d[,2:32]
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
tree$diagnosis <- ifelse(tree$diagnosis=="B",0,1)
tree <- as.data.frame(lapply(tree,normalize))
#look for colinearity in 1st
tree <- select(tree,-c("perimeter_mean","area_mean","radius_worst","perimeter_worst","area_worst"))
#look for colinearity in 2nd
tree <- select(tree,-c("texture_worst"))
#look for colinearity in 3rd
tree <- select(tree,-c("concavity_mean"))
#look for colinearity in se
tree <- select(tree,-c("perimeter_se","area_se"))
#look for colinearity in
tree <- select(tree,-c("concavity_worst"))
tree <- select(tree,-c("points_worst"))
#Decission tree
train <- sample(569,569*0.8)
train_t <- tree[train,]
test_t <- tree[-train,]
set.seed(123)
tree <-rpart(diagnosis~.,data=train_t,method = "class",control = rpart.control(maxdepth = 5))
tree
prp(tree,type=4,extra=1,split.font=1,varlen=-10)
pred <- predict(tree,train_t,type="class")
conf <- confusionMatrix(pred,as.factor(train_t$diagnosis),dnn=c("Predicted","Actual"))
conf
#test data
pred <- predict(tree,test_t,type="class")
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn=c("Predicted","Actual"))
conf
#random forest
rf <-randomForest(as.factor(diagnosis)~.,data=train_t,
ntree=500,importance=T)
pred <- predict(rf,train_t)
conf <- confusionMatrix(pred,as.factor(train_t$diagnosis),dnn = c("Predicted","Actual"))
conf
#testing data
pred <- predict(rf,test_t)
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn = c("Predicted","Actual"))
conf
plot(randomForest(as.factor(diagnosis) ~ ., data=train_t, keep.forest=FALSE, ntree=500), log="y")
getTree(rf, 1, labelVar=TRUE)
#Knn
set.seed(123)
pred <- knn(train=train_t[,-1],test=test_t[,-11],cl=train_t[,1],k=20)
pred
table(x=pred,y=actual)
actual <- test_t[,1]
table(x=pred,y=actual)
pred <- knn(train=train_t[,-1],test=test_t[,-11],cl=train_t[,1],k=5)
pred
actual <- test_t[,1]
table(x=pred,y=actual)
pred <- knn(train=train_t[,-1],test=test_t[,-11],cl=train_t[,1],k=11)
pred
actual <- test_t[,1]
table(x=pred,y=actual)
pred <- knn(train=train_t[,-1],test=test_t[,-11],cl=train_t[,1],k=7)
pred
actual <- test_t[,1]
table(x=pred,y=actual)
pred <- knn(train=train_t[,-1],test=test_t[,-11],cl=train_t[,1],k=8
actual <- test_t[,1]
table(x=pred,y=actual)
pred <- knn(train=train_t[,-1],test=test_t[,-11],cl=train_t[,1],k=8)
pred
actual <- test_t[,1]
table(x=pred,y=actual)
#testing data
pred <- predict(rf,test_t)
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn = c("Predicted","Actual"))
conf
tree <-rpart(diagnosis~.,data=train_t,method = "class",control = rpart.control(maxdepth = 5))
tree
prp(tree,type=4,extra=1,split.font=1,varlen=-10)
pred <- predict(tree,train_t,type="class")
conf <- confusionMatrix(pred,as.factor(train_t$diagnosis),dnn=c("Predicted","Actual"))
conf
#test data
pred <- predict(tree,test_t,type="class")
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn=c("Predicted","Actual"))
conf
#boosting trees
boost <- boosting(diagnosis~.,mfinal=10,data=train_t)
library(adabag)
#boosting trees
boost <- boosting(diagnosis~.,mfinal=10,data=train_t)
View(train_t)
#boosting trees
boost <- boosting(diagnosis~.,mfinal=1000,data=train_t)
train_t
View(train_t)
#boosting trees
boost <- boosting(diagnosis~radious_mean,mfinal=1000,data=train_t)
#boosting trees
boost <- boosting(diagnosis~radius_mean,mfinal=1000,data=train_t)
prp(tree,type=4,extra=1,split.font=10,varlen=-10)
prp(tree,type=4,extra=1,split.font=10,varlen=-10)
prp(tree,type=4,extra=1,split.font=1,varlen=-10)
#boosting trees
boost <- boosting(as.factor(diagnosis)~.,mfinal=10,data=train_t)
str(train_tç)
str(train_t)
train_t[,1]<- factor(train_t[,1])
str(train_t)
boost <- boosting(as.factor(diagnosis)~.,mfinal=10,data=train_t)
boost <- boosting(diagnosis~.,mfinal=10,data=train_t)
test_t[,1]<- factor(test_t[,1])
pred <- predict(boost,d_test)
pred <- predict(boost,test_t)
confusionMatrix(as.factor(pred$class),test_t$diagnosis,dnn=c("Predicted","Actual"))
boost <- boosting(diagnosis~.,mfinal=30,data=train_t)
pred <- predict(boost,test_t)
confusionMatrix(as.factor(pred$class),test_t$diagnosis,dnn=c("Predicted","Actual"))
boost <- boosting(diagnosis~.,mfinal=100,data=train_t)
pred <- predict(boost,test_t)
confusionMatrix(as.factor(pred$class),test_t$diagnosis,dnn=c("Predicted","Actual"))
boost <- boosting(diagnosis~.,mfinal=30,data=train_t)
pred <- predict(boost,test_t)
confusionMatrix(as.factor(pred$class),test_t$diagnosis,dnn=c("Predicted","Actual"))
boost <- boosting(diagnosis~.,mfinal=45,data=train_t)
pred <- predict(boost,test_t)
confusionMatrix(as.factor(pred$class),test_t$diagnosis,dnn=c("Predicted","Actual"))
boost <- boosting(diagnosis~.,mfinal=70,data=train_t)
pred <- predict(boost,test_t)
confusionMatrix(as.factor(pred$class),test_t$diagnosis,dnn=c("Predicted","Actual"))
boost <- boosting(diagnosis~.,mfinal=120,data=train_t)
pred <- predict(boost,test_t)
confusionMatrix(as.factor(pred$class),test_t$diagnosis,dnn=c("Predicted","Actual"))
boost <- boosting(diagnosis~.,mfinal=300,data=train_t)
pred <- predict(boost,test_t)
confusionMatrix(as.factor(pred$class),test_t$diagnosis,dnn=c("Predicted","Actual"))
prp(tree,type=4,extra=1,split.font=1,varlen=-10)
library(rpart.plot)
library(readxl)
library(rpart)
library(tidyverse)
library(caret)
library(randomForest)
library(class)
library(adabag)
#import data
d <- read_excel("wisc_bc_data.xlsx")
View(d)
tree <- d[,2:32]
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
tree$diagnosis <- ifelse(tree$diagnosis=="B",0,1)
tree <- as.data.frame(lapply(tree,normalize))
#Reduction of data
#look for colinearity in 1st
tree <- select(tree,-c("perimeter_mean","area_mean","radius_worst","perimeter_worst","area_worst"))
#look for colinearity in 2nd
tree <- select(tree,-c("texture_worst"))
#look for colinearity in 3rd
tree <- select(tree,-c("concavity_mean"))
#look for colinearity in se
tree <- select(tree,-c("perimeter_se","area_se"))
#look for colinearity in
tree <- select(tree,-c("concavity_worst"))
tree <- select(tree,-c("points_worst"))
#Decission tree
train <- sample(569,569*0.8)
train_t <- tree[train,]
test_t <- tree[-train,]
set.seed(123)
tree <-rpart(diagnosis~.,data=train_t,method = "class",control = rpart.control(maxdepth = 5))
tree
prp(tree,type=4,extra=1,split.font=1,varlen=-10)
pred <- predict(tree,train_t,type="class")
conf <- confusionMatrix(pred,as.factor(train_t$diagnosis),dnn=c("Predicted","Actual"))
conf
#test data
pred <- predict(tree,test_t,type="class")
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn=c("Predicted","Actual"))
conf
#random forest
rf <-randomForest(as.factor(diagnosis)~.,data=train_t,
ntree=500,importance=T)
pred <- predict(rf,train_t)
conf <- confusionMatrix(pred,as.factor(train_t$diagnosis),dnn = c("Predicted","Actual"))
conf
#testing data
pred <- predict(rf,test_t)
conf <- confusionMatrix(pred,as.factor(test_t$diagnosis),dnn = c("Predicted","Actual"))
conf
plot(randomForest(as.factor(diagnosis) ~ ., data=train_t, keep.forest=FALSE, ntree=500), log="y")
getTree(rf, 1, labelVar=TRUE)
#Knn
set.seed(123)
pred <- knn(train=train_t[,-1],test=test_t[,-11],cl=train_t[,1],k=8)
pred
actual <- test_t[,1]
table(x=pred,y=actual)
#boosting trees
train_t[,1]<- factor(train_t[,1])
test_t[,1]<- factor(test_t[,1])
boost <- boosting(diagnosis~.,mfinal=120,data=train_t)
pred <- predict(boost,test_t)
confusionMatrix(as.factor(pred$class),test_t$diagnosis,dnn=c("Predicted","Actual"))
